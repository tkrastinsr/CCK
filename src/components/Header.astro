---
import Menu from "./Menu.astro";
---

<svg style="display:none">
  <symbol id="navicon" viewBox="0 0 24 24" fill="currentColor">
    <path
      d="M21 11h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1h18c0.6 0 1-0.4 1-1s-0.4-1-1-1z"
    ></path>
    <path d="M3 7h18c0.6 0 1-0.4 1-1s-0.4-1-1-1h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1z"
    ></path>
    <path
      d="M21 17h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1h18c0.6 0 1-0.4 1-1s-0.4-1-1-1z"
    ></path>
  </symbol>
  <symbol id="close" viewBox="0 0 24 24" fill="currentColor">
    <path
      d="M19.1,17.7L6.3,4.9c-.4-.4-1-.4-1.4,0s-.4,1,0,1.4l12.7,12.7c.4.4,1,.4,1.4,0s.4-1,0-1.4Z"
    ></path>
    <path
      d="M6.3,19.1l12.7-12.7c.4-.4.4-1,0-1.4s-1-.4-1.4,0l-12.7,12.7c-.4.4-.4,1,0,1.4s1,.4,1.4,0Z"
    ></path>
  </symbol>
</svg>
<header class="container">
  <nav class="nav">
    <h1 class="nav__title">
      <span class="visually-hidden">CCK</span>
      <a href="/" class="logolink"
        ><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 233 78">
          <path
            fill="currentColor"
            d="M75 78 0 48.04V29.96L75 0v14.89L14.464 37.937v2.128L75 63.109V78ZM150 78 75 48.04V29.96L150 0v14.89L89.464 37.937v2.128L150 63.109V78ZM233 78l-60.536-24.181V78H158V0h14.464v24.181L233 0v14.89l-60.536 23.046v2.128L233 63.109V78Z"
          ></path>
        </svg>
      </a>
    </h1>
    <button
      class="nav__button hidden"
      aria-label="Navigation menu"
      aria-expanded="false"
      aria-controls="nav__list"
    >
      <svg role="img" aria-labelledby="svg-title" focusable="false">
        <title id="svg-title">Menu</title>
        <use id="iconlink" xlink:href="#navicon"></use>
      </svg>
    </button>
    <ul class="nav__list" id="nav__list">
      <li class="nav__item"><a class="nav__link" href="/about">About us</a></li>
      <li class="nav__item"><a class="nav__link" href="/news">News</a></li>
      <li class="nav__item">
        <a class="nav__link cta-btn" href="/#">Join us</a>
      </li>
    </ul>
  </nav>
</header>

<style>
  .hidden {
    display: none;
  }

  h1 {
    background-color: unset;
    padding: var(--sp-m) 0;
    margin: unset;
    filter: unset;
  }

  h1 svg {
    width: clamp(4rem, 20vw, 8rem);
  }

  .logolink {
    color: var(--color-text);
    padding: var(--sp-3xs) var(--sp-xs) 0 var(--sp-xs);
    margin-left: calc(var(--sp-xs) * -1);
    border-radius: var(--br-s);
  }

  .logolink:hover {
    color: var(--color-primary);
    background-color: var(--color-text);
  }

  header {
    max-width: var(--max-width-page);
    margin: 0 auto;
    margin-bottom: var(--sp-xl);
    display: flex;
    justify-content: space-between;
  }

  .nav {
    display: grid;
    width: 100%;
  }

  .nav__button {
    grid-row: 1;
    grid-column: 2;
    align-self: center;
    justify-self: end;

    /* reset button styles */
    border: none;
    margin: 0;
    padding: 0;
    font-size: 1rem;
    line-height: 1;
    background: transparent;
    appearance: none;
    color: black; /* safari */
  }

  .nav__button svg {
    width: 1.5rem;
    height: 1.5rem;
  }

  .nav__list {
    grid-row: 2;
    grid-column: 1 / span 2;
  }

  .nav__item {
    border-top: solid 1px black;
  }
  .nav__item:last-of-type {
    border-bottom: solid 1px black;
  }

  .nav__link {
    display: block;
    text-align: center;
    padding: var(--sp-s);
    color: var(--color-text);
    text-decoration: none;
  }

  .nav__link:hover {
    background-color: var(--color-primary);
  }

  @media screen and (min-width: 750px) {
    .nav {
      grid-template-columns: min-content auto;
      align-items: center;
      gap: var(--sp-m);
    }

    .nav__title {
      grid-row: 1;
      grid-column: 1;
      margin: 0;
    }

    .nav__button {
      display: none;
    }

    .nav__list {
      grid-row: 1;
      display: flex;
      justify-content: space-between;
      margin-inline-start: auto;
    }

    .nav__item,
    .nav__item:last-of-type {
      border: none;
      display: flex;
      align-items: center;
    }

    .nav__link {
      padding-block: var(--sp-xs);
      padding-inline: var(--sp-m);
    }

    .cta-btn {
      border: solid 1px var(--color-text);
      border-radius: var(--border-radius);
    }
  }
</style>

<script is:inline>
  const init = () => {
    const $navButton = document.querySelector(".nav__button");
    const $navList = document.querySelector(".nav__list");
    const $iconLink = document.querySelector("#iconlink");
    const listItems = $navList.querySelectorAll("li a");

    $navButton.classList.remove("hidden");
    $navList.classList.add("hidden");

    const openNavigation = () => {
      $navButton.setAttribute("aria-expanded", "true");
      $iconLink.setAttribute("xlink:href", "#close");
      $navList.classList.remove("hidden");
    };

    const closeNavigation = () => {
      $navButton.setAttribute("aria-expanded", "false");
      $iconLink.setAttribute("xlink:href", "#navicon");
      $navList.classList.add("hidden");
    };

    const toggleNavigation = () => {
      const open = $navButton.getAttribute("aria-expanded");
      open === "false" ? openNavigation() : closeNavigation();
    };

    const handleBlur = () => {
      //if (!event.relatedTarget || !$navList.contains(event.relatedTarget)) {
      closeNavigation();
      //}
    };

    $navButton.addEventListener("click", toggleNavigation);

    // add event to the last item in the nav list to trigger the disclosure to close if the user tabs out of the disclosure
    listItems[listItems.length - 1].addEventListener("blur", handleBlur);

    // Close the disclosure if a user presses the escape key
    window.addEventListener("keyup", (e) => {
      if (e.key === "Escape") {
        $navButton.focus();
        closeNavigation();
      }
    });
  };

  init();
</script>
